# Construct the output
for(i in 1:length(states)){
state <- states[i]
# Take hospital data for state i and remove NAs from specified outcome
work_df <- subset(dat1,dat1[,2] == state & is.na(dat[,dis_cnum]) == FALSE)
# Sort hospital names by alphabetical order
work_df1 <- work_df[order(work_df[,1]),]
# Change to numeric and get order of specified outcome data points CHECK
work_df1[,3] <- as.numeric(work_df1[,3])
# Sort dataframe CHECK
work_df1 <- work_df1[order(as.numeric(c(work_df1[,3]))),]
# Add rank column to dataframe (for output reference)
work_df1$Rank <- c(1:nrow(work_df1))
if(num == "best") {val <- 1}
if(num == "worst") {val <- nrow(work_df1)}
else{val = num}
# If input rank does not exist, return NA for that hospital name datapoint
# Else: get hospital with specified rank
if(val > nrow(work_df)){hos_name = NA}
else{
work_df1 <- subset(work_df1,work_df1$Rank == val)
hos_name = work_df1[,1]
}
# Compile output
entry <- c(hos_name,state)
final_df=rbind(final_df,entry)
}
# Return output
return(final_df[-1,])
}
best <- function(abv, outcome_name) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Take only the necessary data
df <- data.frame(cbind(data[, 2],  # Hospital Name
data[, 7],  # State
data[, 11], # Heart attack
data[, 17], # Heart failure
data[, 23]  # Pneumonia
)
,stringsAsFactors = FALSE
)
# Set colnames of df
df_colnames <- c("hospital name", "state", "heart attack", "heart failure", "pneumonia")
colnames(df) <- df_colnames
## Check if state and outcome are valid. If not, stop and return error.
# Check state
if (!abv %in% df$state) {
stop("invalid state")
# Check outcome
} else if (!outcome_name %in% df_colnames) {
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
# Create subset with only the data with the specified state
state_df <- subset(df, state == abv)
# Get column number of outcome
if (outcome_name == "heart attack") {
col_n <<- 3
} else if (outcome_name == "heart failure") {
col_n <<- 4
} else if (outcome_name == "pneumonia") {
col_n <<- 5
}
# Find row with the least deaths
row_min_death <- which(state_df[ , col_n] == min(state_df[ , col_n])
)
# Get hospital name with least deaths
hosp <- state_df[row_min_death, 1]
# In case of tie, return first hospital based on alphabetical order
hosp_final <- sort(hosp)
return(hosp_final[1])
}
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if (!state %in% dat$State){
stop('invalid state')
} else if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
}
## Return hospital name in that state with the given rank
## 30-day death rate
# Create df with only the hospitals from desired state
work_df <- subset(dat, dat[7] == state)
# Take only necessary columns
work_df <- data.frame(cbind(work_df[, 2],  # Hospital Name
work_df[, 11], # Heart attack
work_df[, 17], # Heart failure
work_df[, 23]  # Pneumonia
)
,stringsAsFactors = FALSE
)
# Set column names
df_colnames <- c("hospital name", "heart attack", "heart failure", "pneumonia")
colnames(work_df) <- df_colnames
# Sort df by order
col_n <- which(df_colnames == outcome)
work_df <- work_df[order(as.numeric(work_df[,col_n]), work_df[,1], na.last = NA),]
# Return output based on num
if (!is.numeric(num)){
if (num == "best"){
return(work_df[1,1])
} else if (num == "worst"){
return(tail(work_df[,1], n=1))
}
} else if(is.numeric(num)){
return(work_df[num,1])
}
}
rankall <- function(outcome,num="best"){
# Read file
dat <- read.csv("outcome-of-care-measures.csv",colClasses="character",na.strings="Not Available")
# Stop if input is invalid
disease <- c("heart attack", "heart failure", "pneumonia")
if(outcome %in% disease == FALSE) {
stop("invalid outcome")
}
# Initialize df for output
final_df <- data.frame(hospital="",state="")
# Get column number of input outcome
work_df <- data.frame(c_num = c(11,17,23), o = disease)
dis_cnum <- subset(work_df,work_df$o == outcome)[,1]
# Get only the necessary columns
dat1 <- dat[,c(2,7,dis_cnum)]
# Get alphabetically sorted list of state abbreviations
states <- sort(unique(dat$State))
# Construct the output
for(i in 1:length(states)){
state <- states[i]
# Take hospital data for state i and remove NAs from specified outcome
work_df <- subset(dat1,dat1[,2] == state & is.na(dat[,dis_cnum]) == FALSE)
# Sort hospital names by alphabetical order
work_df1 <- work_df[order(work_df[,1]),]
# Change to numeric and get order of specified outcome data points CHECK
work_df1[,3] <- as.numeric(work_df1[,3])
# Sort dataframe CHECK
work_df1 <- work_df1[order(as.numeric(c(work_df1[,3]))),]
# Add rank column to dataframe (for output reference)
work_df1$Rank <- c(1:nrow(work_df1))
if(num == "best") {val <- 1}
if(num == "worst") {val <- nrow(work_df1)}
else{val = num}
# If input rank does not exist, return NA for that hospital name datapoint
# Else: get hospital with specified rank
if(val > nrow(work_df)){hos_name = NA}
else{
work_df1 <- subset(work_df1,work_df1$Rank == val)
hos_name = work_df1[,1]
}
# Compile output
entry <- c(hos_name,state)
final_df=rbind(final_df,entry)
}
# Return output
return(final_df[-1,])
}
best("SC", "heart attack")
best("NY", "pneumonia")
best <- function(abv, outcome_name) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Take only the necessary data
df <- data.frame(cbind(data[, 2],  # Hospital Name
data[, 7],  # State
data[, 11], # Heart attack
data[, 17], # Heart failure
data[, 23]  # Pneumonia
)
,stringsAsFactors = FALSE
)
# Set colnames of df
df_colnames <- c("hospital name", "state", "heart attack", "heart failure", "pneumonia")
colnames(df) <- df_colnames
## Check if state and outcome are valid. If not, stop and return error.
# Check state
if (!abv %in% df$state) {
stop("invalid state")
# Check outcome
} else if (!outcome_name %in% df_colnames) {
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
# Create subset with only the data with the specified state
state_df <- subset(df, state == abv)
# Get column number of outcome
if (outcome_name == "heart attack") {
col_n <<- 3
} else if (outcome_name == "heart failure") {
col_n <<- 4
} else if (outcome_name == "pneumonia") {
col_n <<- 5
}
# Find row with the least deaths
row_min_death <- which(state_df[ , col_n] == min(state_df[ , col_n])
)
# Get hospital name with least deaths
hosp <- state_df[row_min_death, 1]
# In case of tie, return first hospital based on alphabetical order
hosp_final <- sort(hosp)
return(hosp_final[1])
}
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if (!state %in% dat$State){
stop('invalid state')
} else if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
}
## Return hospital name in that state with the given rank
## 30-day death rate
# Create df with only the hospitals from desired state
work_df <- subset(dat, dat[7] == state)
# Take only necessary columns
work_df <- data.frame(cbind(work_df[, 2],  # Hospital Name
work_df[, 11], # Heart attack
work_df[, 17], # Heart failure
work_df[, 23]  # Pneumonia
)
,stringsAsFactors = FALSE
)
# Set column names
df_colnames <- c("hospital name", "heart attack", "heart failure", "pneumonia")
colnames(work_df) <- df_colnames
# Sort df by order
col_n <- which(df_colnames == outcome)
work_df <- work_df[order(as.numeric(work_df[,col_n]), work_df[,1], na.last = NA),]
# Return output based on num
if (!is.numeric(num)){
if (num == "best"){
return(work_df[1,1])
} else if (num == "worst"){
return(tail(work_df[,1], n=1))
}
} else if(is.numeric(num)){
return(work_df[num,1])
}
}
rankall <- function(outcome,num="best"){
# Read file
dat <- read.csv("outcome-of-care-measures.csv",colClasses="character",na.strings="Not Available")
# Stop if input is invalid
disease <- c("heart attack", "heart failure", "pneumonia")
if(outcome %in% disease == FALSE) {
stop("invalid outcome")
}
# Initialize df for output
final_df <- data.frame(hospital="",state="")
# Get column number of input outcome
work_df <- data.frame(c_num = c(11,17,23), o = disease)
dis_cnum <- subset(work_df,work_df$o == outcome)[,1]
# Get only the necessary columns
dat1 <- dat[,c(2,7,dis_cnum)]
# Get alphabetically sorted list of state abbreviations
states <- sort(unique(dat$State))
# Construct the output
for(i in 1:length(states)){
state <- states[i]
# Take hospital data for state i and remove NAs from specified outcome
work_df <- subset(dat1,dat1[,2] == state & is.na(dat[,dis_cnum]) == FALSE)
# Sort hospital names by alphabetical order
work_df1 <- work_df[order(work_df[,1]),]
# Change to numeric and get order of specified outcome data points CHECK
work_df1[,3] <- as.numeric(work_df1[,3])
# Sort dataframe CHECK
work_df1 <- work_df1[order(as.numeric(c(work_df1[,3]))),]
# Add rank column to dataframe (for output reference)
work_df1$Rank <- c(1:nrow(work_df1))
if(num == "best") {val <- 1}
if(num == "worst") {val <- nrow(work_df1)}
else{val = num}
# If input rank does not exist, return NA for that hospital name datapoint
# Else: get hospital with specified rank
if(val > nrow(work_df)){hos_name = NA}
else{
work_df1 <- subset(work_df1,work_df1$Rank == val)
hos_name = work_df1[,1]
}
# Compile output
entry <- c(hos_name,state)
final_df=rbind(final_df,entry)
}
# Return output
return(final_df[-1,])
}
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
best("NY", "pneumonia")
best <- function(abv, outcome_name) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Take only the necessary data
df <- data.frame(cbind(data[, 2],  # Hospital Name
data[, 7],  # State
data[, 11], # Heart attack
data[, 17], # Heart failure
data[, 23]  # Pneumonia
)
,stringsAsFactors = FALSE
)
# Set colnames of df
df_colnames <- c("hospital name", "state", "heart attack", "heart failure", "pneumonia")
colnames(df) <- df_colnames
## Check if state and outcome are valid. If not, stop and return error.
# Check state
if (!abv %in% df$state) {
stop("invalid state")
# Check outcome
} else if (!outcome_name %in% df_colnames) {
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
# Create subset with only the data with the specified state
state_df <- subset(df, state == abv)
# Get column number of outcome
if (outcome_name == "heart attack") {
col_n <<- 3
} else if (outcome_name == "heart failure") {
col_n <<- 4
} else if (outcome_name == "pneumonia") {
col_n <<- 5
}
# Find row with the least deaths
row_min_death <- which(state_df[ , col_n] == min(state_df[ , col_n])
)
# Get hospital name with least deaths
hosp <- state_df[row_min_death, 1]
# In case of tie, return first hospital based on alphabetical order
hosp_final <- sort(hosp)
return(hosp_final)
}
best("NY", "pneumonia")
best <- function(abv, outcome_name) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Take only the necessary data
df <- data.frame(cbind(data[, 2],  # Hospital Name
data[, 7],  # State
data[, 11], # Heart attack
data[, 17], # Heart failure
data[, 23]  # Pneumonia
)
,stringsAsFactors = FALSE
)
# Set colnames of df
df_colnames <- c("hospital name", "state", "heart attack", "heart failure", "pneumonia")
colnames(df) <- df_colnames
## Check if state and outcome are valid. If not, stop and return error.
# Check state
if (!abv %in% df$state) {
stop("invalid state")
# Check outcome
} else if (!outcome_name %in% df_colnames) {
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
# Create subset with only the data with the specified state
state_df <- subset(df, state == abv)
# Get column number of outcome
if (outcome_name == "heart attack") {
col_n <<- 3
} else if (outcome_name == "heart failure") {
col_n <<- 4
} else if (outcome_name == "pneumonia") {
col_n <<- 5
}
# Find row with the least deaths
row_min_death <- which(state_df[ , col_n] == min(state_df[ , col_n])
)
return(row_min_death)
# Get hospital name with least deaths
hosp <- state_df[row_min_death, 1]
# In case of tie, return first hospital based on alphabetical order
hosp_final <- sort(hosp)
return(hosp_final)
}
best("NY", "pneumonia")
source('C:/Users/Bernard/Desktop/Productive/R/FINAL/best.R', echo=TRUE)
source('C:/Users/Bernard/Desktop/Productive/R/FINAL/best.R', echo=TRUE)
source('C:/Users/Bernard/Desktop/Productive/R/FINAL/best.R', echo=TRUE)
source('C:/Users/Bernard/Desktop/Productive/R/FINAL/best.R', echo=TRUE)
best("AK", "pneumonia")
source('C:/Users/Bernard/Desktop/Productive/R/FINAL/best.R', echo=TRUE)
best("NY", "pneumonia")
source('C:/Users/Bernard/Desktop/Productive/R/FINAL/best.R', echo=TRUE)
best("NY", "pneumonia")
best <- function(abv, outcome_name) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Take only the necessary data
df <- data.frame(cbind(data[, 2],  # Hospital Name
data[, 7],  # State
data[, 11], # Heart attack
data[, 17], # Heart failure
data[, 23]  # Pneumonia
)
,stringsAsFactors = FALSE
)
# Set colnames of df
df_colnames <- c("hospital name", "state", "heart attack", "heart failure", "pneumonia")
colnames(df) <- df_colnames
# Make numeric
for (i in df){
df[i] <- as.numeric(df[i])
}
## Check if state and outcome are valid. If not, stop and return error.
# Check state
if (!abv %in% df$state) {
stop("invalid state")
# Check outcome
} else if (!outcome_name %in% df_colnames) {
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
# Create subset with only the data with the specified state
state_df <- subset(df, state == abv)
# Get column number of outcome
if (outcome_name == "heart attack") {
col_n <<- 3
} else if (outcome_name == "heart failure") {
col_n <<- 4
} else if (outcome_name == "pneumonia") {
col_n <<- 5
}
# Find row with the least deaths
row_min_death <- which(state_df[ , col_n] == min(state_df[ , col_n])
)
# Get hospital name with least deaths
hosp <- state_df[row_min_death, 1]
return(hosp)
# In case of tie, return first hospital based on alphabetical order
hosp_final <- sort(hosp)
return(hosp_final)
}
best("AK", "pneumonia")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Take only the necessary data
df <- data.frame(cbind(data[, 2],  # Hospital Name
data[, 7],  # State
data[, 11], # Heart attack
data[, 17], # Heart failure
data[, 23]  # Pneumonia
)
,stringsAsFactors = FALSE
)
source('C:/Users/Bernard/Desktop/Productive/R/FINAL/best.R', echo=TRUE)
source('C:/Users/Bernard/Desktop/Productive/R/FINAL/best.R', echo=TRUE)
best("NY", "pneumonia")
best <- function(abv, outcome_name) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Take only the necessary data
df <- data.frame(cbind(data[, 2],  # Hospital Name
data[, 7],  # State
data[, 11], # Heart attack
data[, 17], # Heart failure
data[, 23]  # Pneumonia
)
,stringsAsFactors = FALSE
)
# Set colnames of df
df_colnames <- c("hospital name", "state", "heart attack", "heart failure", "pneumonia")
colnames(df) <- df_colnames
## Check if state and outcome are valid. If not, stop and return error.
# Check state
if (!abv %in% df$state) {
stop("invalid state")
# Check outcome
} else if (!outcome_name %in% df_colnames) {
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
# Create subset with only the data with the specified state
state_df <- subset(df, state == abv)
# Get column number of outcome
if (outcome_name == "heart attack") {
col_n <<- 3
} else if (outcome_name == "heart failure") {
col_n <<- 4
} else if (outcome_name == "pneumonia") {
col_n <<- 5
}
#
df[,col_n] <- as.numeric(df[,col_n])
return(summary(df))
# Find row with the least deaths
row_min_death <- which(state_df[ , col_n] == min(state_df[ , col_n])
)
# Get hospital name with least deaths
hosp <- state_df[row_min_death, 1]
return(hosp)
# In case of tie, return first hospital based on alphabetical order
hosp_final <- sort(hosp)
return(hosp_final)
}
best("NY", "pneumonia")
source('C:/Users/Bernard/Desktop/Productive/R/FINAL/best.R', echo=TRUE)
best("NY", "pneumonia")
source('C:/Users/Bernard/Desktop/Productive/R/FINAL/best.R', echo=TRUE)
best("NY", "pneumonia")
source('C:/Users/Bernard/Desktop/Productive/R/FINAL/best.R', echo=TRUE)
best("NY", "pneumonia")
# Get only the necessary columns
dat1 <- dat[,c(2,7,dis_cnum)]
source("C:/Users/Bernard/Desktop/Productive/R/FINAL/rankall.R", echo=TRUE)
